## -*- encoding: utf-8 -*-


# This file was *autogenerated* from the file lr2.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_27 = Integer(27); _sage_const_10 = Integer(10); _sage_const_31 = Integer(31); _sage_const_33 = Integer(33); _sage_const_7 = Integer(7); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_8 = Integer(8); _sage_const_6 = Integer(6); _sage_const_36 = Integer(36); _sage_const_39 = Integer(39); _sage_const_0 = Integer(0); _sage_const_41 = Integer(41); _sage_const_43 = Integer(43); _sage_const_46 = Integer(46); _sage_const_50 = Integer(50); _sage_const_9 = Integer(9); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_101 = Integer(101); _sage_const_103 = Integer(103); _sage_const_105 = Integer(105); _sage_const_107 = Integer(107); _sage_const_111 = Integer(111); _sage_const_113 = Integer(113); _sage_const_115 = Integer(115); _sage_const_117 = Integer(117); _sage_const_119 = Integer(119); _sage_const_124 = Integer(124); _sage_const_127 = Integer(127); _sage_const_129 = Integer(129); _sage_const_132 = Integer(132); _sage_const_134 = Integer(134); _sage_const_145 = Integer(145); _sage_const_5 = Integer(5)## This file (lr2.sagetex.sage) was *autogenerated* from lr2.tex with sagetex.sty version 2020/08/12 v3.5.
import sagetex
_st_ = sagetex.SageTeXProcessor('lr2', version='2020/08/12 v3.5', version_check=True)
_st_.current_tex_line = _sage_const_27 
_st_.blockbegin()
try:
 xmin, xmax = -_sage_const_10 , _sage_const_10 
 ymin, ymax = -_sage_const_10 , _sage_const_10 
 zmin, zmax = -_sage_const_10 , _sage_const_10 
except:
 _st_.goboom(_sage_const_31 )
_st_.blockend()
_st_.current_tex_line = _sage_const_33 
_st_.blockbegin()
try:
 var("x y z")
 __tmp__=var("x,y,z"); f = symbolic_expression(_sage_const_7 *x**_sage_const_2  + _sage_const_3 *y**_sage_const_2  + _sage_const_3 *z**_sage_const_2  +  _sage_const_8 *x*y + _sage_const_8 *x*z + _sage_const_6 *y*z + _sage_const_6 *x + y + _sage_const_7 ).function(x,y,z)
except:
 _st_.goboom(_sage_const_36 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_39 
 _st_.inline(_sage_const_0 , latex(f(x, y, z)))
except:
 _st_.goboom(_sage_const_39 )
_st_.current_tex_line = _sage_const_41 
_st_.blockbegin()
try:
 p = implicit_plot3d(f(x=x, y=y, z=z), (x, xmin, xmax), (y, ymin, ymax), (z, zmin, zmax))
except:
 _st_.goboom(_sage_const_43 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_46 
 _st_.plot(_sage_const_0 , format='notprovided', _p_=p)
except:
 _st_.goboom(_sage_const_46 )
_st_.current_tex_line = _sage_const_50 
_st_.blockbegin()
try:
 def kanonic_coeffs(fun):
     try:
         var("l l1 l2 l3")
         lvcts = []
         svcts = []
         tmp_fun = fun
         a = vector(RR, _sage_const_3 )
         tmp_vct = vector(RR, _sage_const_9 )
         var_combs_tmp = (x**_sage_const_2 , y**_sage_const_2 , z**_sage_const_2 , x*y, x*z, y*z)
         var_combs_0 = (x**_sage_const_2 , x*y, x*z, x*y, y**_sage_const_2 , y*z, x*z, y*z, z**_sage_const_2 )
         var_combs_1 = (x, y, z)
         for i, var_comb in enumerate(var_combs_0):
             if i == _sage_const_0  or i == _sage_const_4  or i == _sage_const_8 :
                 tmp_vct[i] = fun.coefficient(var_comb)
             else:
                 tmp_vct[i] = fun.coefficient(var_comb) / _sage_const_2 
         for var_comb in var_combs_tmp:
             tmp_fun -= fun.coefficient(var_comb)*var_comb
         for i, var_comb in enumerate(var_combs_1):
             a[i] = tmp_fun.coefficient(var_comb) / _sage_const_2 
             tmp_fun -= tmp_fun.coefficient(var_comb)*var_comb
         a0 = tmp_fun.n()
         A = matrix(SR, _sage_const_3 , tmp_vct)
         L = matrix(SR, _sage_const_3 , _sage_const_3 , var('l'))
         E = matrix(SR, _sage_const_3 , _sage_const_3 , _sage_const_1 )
         lvct = vector([l1, l2, l3])
         lambdas = solve([(A-L).determinant() == _sage_const_0 ], l)
         for i, el in enumerate(lambdas):
             nums = []
             lhs = (A-el.rhs()*E)*lvct
             res = solve([lhs[_sage_const_0 ] == _sage_const_0 , lhs[_sage_const_1 ] == _sage_const_0 , lhs[_sage_const_2 ] == _sage_const_0 ], l1, l2, l3)[_sage_const_0 ]
             for i in range(len(res)):
                 if len(res[i].rhs().variables()) == _sage_const_0 :
                     nums.append(res[i].rhs())
                 else:
                     nums.append(res[i].rhs()(_sage_const_1 ))
             lvcts.append(vector(nums))
         for el in lvcts:
             norm_lvct = (el / sqrt((el*el).n())).n()
             svcts.append(norm_lvct)
         ST = matrix(RR, _sage_const_3 )
         for i in range(len(svcts)):
             ST[i] = svcts[i]
         a_ = ST*a
         for i in range(len(lambdas)):
             lambdas[i] = lambdas[i].rhs().n()
         return (lambdas, a_, a0)
     except:
         print("Something gone wrong\n")
         return (None, None, None)
except:
 _st_.goboom(_sage_const_101 )
_st_.blockend()
_st_.current_tex_line = _sage_const_103 
_st_.blockbegin()
try:
 (lambdas, a, a0) = kanonic_coeffs(f)
except:
 _st_.goboom(_sage_const_105 )
_st_.blockend()
_st_.current_tex_line = _sage_const_107 
_st_.blockbegin()
try:
 print("Lambdas:", tuple(lambdas))
 print("a:", a)
 print("a0:", a0)
except:
 _st_.goboom(_sage_const_111 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_113 
 _st_.inline(_sage_const_1 , latex(tuple(lambdas)))
except:
 _st_.goboom(_sage_const_113 )
try:
 _st_.current_tex_line = _sage_const_115 
 _st_.inline(_sage_const_2 , latex(a))
except:
 _st_.goboom(_sage_const_115 )
try:
 _st_.current_tex_line = _sage_const_117 
 _st_.inline(_sage_const_3 , latex(a0))
except:
 _st_.goboom(_sage_const_117 )
_st_.current_tex_line = _sage_const_119 
_st_.blockbegin()
try:
 var("kx ky kz")
 first_part = lambdas[_sage_const_0 ]*kx**_sage_const_2  + lambdas[_sage_const_1 ]*ky**_sage_const_2  + lambdas[_sage_const_2 ]*kz**_sage_const_2 
 second_part = _sage_const_2 *a[_sage_const_0 ]*kx + _sage_const_2 *a[_sage_const_1 ]*ky + _sage_const_2 *a[_sage_const_2 ]*kz + a0
 __tmp__=var("kx,ky,kz"); kanonic_func = symbolic_expression(first_part + second_part).function(kx,ky,kz)
except:
 _st_.goboom(_sage_const_124 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_127 
 _st_.inline(_sage_const_4 , latex(kanonic_func(kx, ky, kz)))
except:
 _st_.goboom(_sage_const_127 )
_st_.current_tex_line = _sage_const_129 
_st_.blockbegin()
try:
 p = implicit_plot3d(kanonic_func(kx=kx, ky=ky, kz=kz), (kx, xmin, xmax),\
 (ky, ymin, ymax), (kz, zmin, zmax))
except:
 _st_.goboom(_sage_const_132 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_134 
 _st_.plot(_sage_const_1 , format='notprovided', _p_=p)
except:
 _st_.goboom(_sage_const_134 )
try:
 _st_.current_tex_line = _sage_const_145 
 _st_.inline(_sage_const_5 , latex(lambdas[_sage_const_0 ]))
except:
 _st_.goboom(_sage_const_145 )
try:
 _st_.current_tex_line = _sage_const_145 
 _st_.inline(_sage_const_6 , latex(lambdas[_sage_const_1 ]))
except:
 _st_.goboom(_sage_const_145 )
try:
 _st_.current_tex_line = _sage_const_145 
 _st_.inline(_sage_const_7 , latex(a[_sage_const_2 ]))
except:
 _st_.goboom(_sage_const_145 )
_st_.endofdoc()

